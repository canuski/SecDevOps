name: Python Application Security Scans

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
  schedule:
    - cron: "0 0 * * 0"  # Weekly scan on Sunday at midnight

permissions:
  contents: read
  security-events: write  # Required for SAST checks and vulnerability analysis

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Step 3: Install dependencies (flake8, bandit, safety, detect-secrets)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety detect-secrets
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 4: Lint code with flake8
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Step 5: Run Bandit for SAST checks
      - name: Running Bandit for SAST checks...
        run: |
          echo "Running Bandit for SAST checks..."
          bandit -r . -ll || true  # Bandit returns 0 if no issues, but can still detect errors

      # Step 6: Run the Safety scan for dependency vulnerabilities
      - name: Dependency Vulnerability Check
        id: deps
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}  # Your Safety API key
        run: |
          echo "Running safety scan for dependency vulnerabilities..."
          safety scan --api-key $SAFETY_API_KEY --full-report > safety_output.txt || echo "Vulnerabilities found"

      # Step 7: Check if vulnerabilities were found in the Safety scan and block the PR
      - name: Check for vulnerabilities
        run: |
          echo "Checking safety scan output for vulnerabilities..."
          if [ -f safety_output.txt ]; then
            # If "No issues found" is present in the safety output, do not block the PR
            if grep -q "No issues found" safety_output.txt; then
              echo "✅ No vulnerabilities found in dependencies."
            else
              echo "❌ Safety scan found vulnerabilities! Blocking the PR."
              cat safety_output.txt
              exit 1  # Fail the job and block the PR if vulnerabilities are found
            fi
          else
            echo "❌ Safety scan failed or produced no output. Check Safety configuration."
            exit 1  # If no output is generated, block the PR
          fi

      # Step 8: Run detect-secrets to scan for secrets
      - name: Secret detection
        id: secrets
        run: |
          echo "Running detect-secrets scan..."
          detect-secrets scan > .secrets.baseline
          echo "Checking for secrets..."
          if grep -q '"hashed_secret"' .secrets.baseline; then
            echo "❌ Secrets detected in the code! Blocking the PR."
            exit 1
          else
            echo "✅ No secrets detected."
          fi